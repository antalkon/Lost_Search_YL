services:
  # auth
  auth-service:
    container_name: auth-container
    build: ./auth
    env_file:
      - ./auth/config/auth.env
    depends_on:
      init-kafka:
        condition: service_started
    networks:
      - default

  postgres-auth:
    env_file:
      - ./auth/config/auth.env
    container_name: postgres-container
    image: postgres
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: db
      POSTGRES_PORT: 5432
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data
      - ./auth/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - default


  #notify
  notify:
    env_file:
      - notify/.env
    container_name: notify-container
    build: ./notify
    networks:
      - default
    depends_on:
      init-kafka:
        condition: service_completed_successfully


  #search

  postgres-search:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_PORT=5432
    volumes:
      - postgres_search_data:/var/lib/postgresql/data

    restart: on-failure

  redis:
    image: redis:7
    container_name: redis_container
    environment:
      REDIS_PORT: 6060
    volumes:
      - redis_data:/data

  search:
    build: ./search
    environment:
      - POSTGRES_HOST=postgres-search
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6060
      - KAFKA_BROKER=kafka:8080
      - KAFKA_REQUESTS_TOPIC=ads_request
      - KAFKA_NOTIFY_RESPONSES_TOPIC=ads_response
      - NOTIFY_SERVICE_NAME=search


    depends_on:
      - postgres-search
      - redis
      - init-kafka


  #gateway service

  gateway-service:
    build:
      context: ./gateway_service
    env_file:
      - gateway_service/.env
    environment:
      - REST_PORT=7070
      - KAFKA_HOST=kafka
      - KAFKA_PORT=8080
      - PROMETHEUS_PORT=9090
    depends_on:
      init-kafka:
        condition: service_started
    networks:
      - default

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - default

  kafka:
    image: confluentinc/cp-kafka:7.4.1
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_started
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_PORT: 8080
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:8080
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:8080
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 7071
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka -Dcom.sun.management.jmxremote.port=7071"
    ports:
      - "8080:8080"
    volumes:
      - ./jmx-exporter-config.yml:/etc/jmx-exporter/config.yml
    networks:
      - default

  init-kafka:
    image: confluentinc/cp-kafka:7.4.1
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:8080 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:8080 --create --if-not-exists --topic notify_request --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:8080 --create --if-not-exists --topic notify_response --replication-factor 1 --partitions 1

      kafka-topics --bootstrap-server kafka:8080 --create --if-not-exists --topic ads_request --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:8080 --create --if-not-exists --topic ads_response --replication-factor 1 --partitions 1

      kafka-topics --bootstrap-server kafka:8080 --create --if-not-exists --topic auth_request --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:8080 --create --if-not-exists --topic auth_response --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:8080 --list
      "
    networks:
      - default



  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-container
    expose:
      - 9090
    ports:
      - "9090:9090"
    volumes:
      - "./prometheus.yml:/etc/prometheus/prometheus.yml"
    depends_on:
      gateway-service:
        condition: service_started
    networks:
      - default

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus




  nginx:
    image: nginx
    container_name: nginx-container
    ports:
      - "80:80"
    volumes:
      - ./gateway_service/proxy/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      gateway-service:
        condition: service_started
    networks:
      - default

networks:
  default:


volumes:
  postgres_search_data:
  redis_data:
  postgres_auth_data: